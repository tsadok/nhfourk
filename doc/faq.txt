About this document:
Last modified by Alex Smith, 2015-04-01

Copyright (C) 2013 Alex Smith.

This FAQ is licensed under the NetHack General Public License.  See
libnethack/dat/license for details.




"FAQ" stands for "Frequently Asked Questions".  However, giving a list
of the questions I've been asked a lot seems mostly useless by itself.
So here are some questions I've been asked a lot, and some questions
that have been asked less often but I expect to be asked and thus need
to be answered pre-emptively, together with their answers.


About NetHack Fourk
===================

What is NetHack?
----------------

A long time ago, back before the use of graphics for computer games played on
actual computers (rather than games consoles) caught on, there was a game
called Rogue.  Previous games were mostly text adventures (think Zork or
Colossal Cave Adventure); the game would describe a situation using text, and
the player would respond to that.  Instead of describing the game world, Rogue
visualised it, placing letters on specific screen locations in order to show
where the player was relative to enemies.  It was also notable for having a
randomly generated map, and deleting the save file upon the character's death;
there was no way to go back and try again.

NetHack is a "roguelike" game following in the same tradition; the player
controls an adventurer delving into a randomly generated dungeon to retrieve
the Amulet of Yendor from its depths.  The earliest versions were based quite
heavily on Dungeons & Dragons, although it has diverged somewhat since
(although there are still many obvious ties between them, such as the presence
of surprisingly many types of polearm).  As such, it allows unusual levels of
flexibility in its gameplay; if it seems like you should be able to do
something, you probably can, and unlike many roguelikes, the emphasis is on
allowing you to build the character you want to play, rather than on trying to
make do with a limited number of tools.

What is NetHack Fourk?
----------------------

NetHack Fourk is a derivative (in software development parlance, a "fork")
of NetHack 4.  In most respects it is very similar to NetHack 4, and it
regularly incorporates new enhancements, bug fixes, and other changes 
from that codebase.  However, NetHack Fourk also has additional changes.

Why Fork?  What's Wrong with NetHack 4?
---------------------------------------

I did not fork because of anything wrong with NetHack 4, but rather
the reverse:  I wanted to test out some changes to see whether they
work out in practice as well as I hope that they do, but I wanted to
do it in a way that does not disrupt the stability of NetHack 4.  By
forking, I am able to try out some things and see how they work in
practice, before deciding whether they ultimately belong in the game
or not.  Those that pass muster will hopefully be merged upstream into
NetHack 4.  Others may need to be refined further or even reverted.

What is NetHack 4?
------------------

NetHack (and its predecessor Hack) were kept in development for many many
years; NetHack dates from 1987 (and as such, is older than many people who
play it).  The development team who worked on versions 1 to 3 of NetHack
([the DevTeam][1]) are still working on it (although there was no real
evidence of this until 2014), but they don't release their progress, meaning
that the situation is effectively the same as if they'd been doing nothing.
This means that NetHack is still stuck in 2003, with the world moving on in
the meantime.  It's a testament to the game's quality that it can still be
enjoyed after staying stagnant for this long, but the situation is far from
what it could be.

As expected for a game popular among programmers, there were many people
willing to take the game forwards who *weren't* members of the DevTeam; an
ecosystem of first patches, and later on full "variants", sprang up.  After a
long time with no useful activity from the DevTeam, though, it became clear
that a replacement would be needed; this was exacerbated somewhat by the
tendency of variants to be created and guided by players who were
significantly above average at the game (and as such, noticeably harder),
leading to variants being dismissed by many players.  [NetHack 4][2] was
originally created by merging two resonably conservative variants (NitroHack
by Daniel Thaler, which focused on modernizing the codebase, and AceHack by
Alex Smith, which focused on interface improvements), although many other
people have worked on it since, or contributed patches to the variants it is
based on.  The result is, hopefully, a more modern NetHack that still has
gameplay familiar to fans of previous versions.



How can I follow/contribute to NetHack Fourk development?
---------------------------------------------------------

Uncontroversial changes, such as straightforward bug fixes and interface
enhancements, should instead be contributed to NetHack 4 directly.  NetHack
Fourk regularly pulls in changes from NetHack 4, so anything contributed there
will automatically become a part of NetHack Fourk as well.

Beyond that, the source repository is available on github.  Anyone can clone
this repository and commit additional changes to their own repository.  If you
have changes that you believe should be merged into NetHack Fourk for testing
(but are not ready for NetHack 4), contact Jonadab.


How can I follow/contribute to the programming of NetHack 4?
------------------------------------------------------------

NetHack 4's development can be followed from its [git repository][3]; active
development is typically in branch "master".  (That repository also contains
(often out-of-date) versions of some related variants.)  There is also a
public [bug tracker][4], where you can read or report bugs.  The same bug
tracker is used for NetHack4 itself and for variants, including NetHack
Fourk and FIQHack.

Sometimes, interim development projects take place on other branches, because
the "master" branch is expected to be at least somewhat playable.  In
particular, we often use a "savebreak" branch for development that is expected
to break the save system (either because the save system itself does not work,
or because the save format changes so often that a saved game might not be
loadable on the next day).  Sometimes there are also branches for development
planned to go into a future version, which normally have numerical names
indicating the version the changes will go into.

You can also send emails to ais523.  The email address is not written here
directly in the hope of confusing spambots, but it's the most obvious one that
can be formed from the username "ais523" and the domain name "nethack4.org".

If you want to discuss the game or its development, we also have an IRC
channel, #nethack4 on irc.libera.chat; many of the developers idle there, and
many discussions are made there too.  There is also now a #nethack-dev channel
for NetHack development generally (mostly aimed at variants with fewer changes
from the 3.4.3 codebase).

Finally, you can comment on Usenet, at rec.games.roguelikes.nethack.  Make
sure your subject line clearly refers to NetHack 4 if you don't want to cause
confusion as to which version you're talking about.


I'm not a programmer.  Can I still help with NetHack 4?
-------------------------------------------------------

You can.  One way any NetHack player can help out is in playtesting; connect
to the server (following the instructions below) and start playing the most
recent version.  If you encounter a bug, or if the game tells you that
something is wrong and asks you to make a bug report, please do contact us,
or file a bug report in the public [bug tracker][4]


What about playing in tournaments?
----------------------------------

NetHack Fourk is unable to participate in tournaments at this time, due to
lack of a public server.  Sorry.

However, NetHack 4 is one of the games featured in the annual
[Junethack tournament][5], which looks at the future of NetHack by allowing
competition on the various forks and variants (as well as 3.4.3).  As the name
might suggest, it runs in June every year.  See the tournament site for more
details.


What license is the code under?
-------------------------------

Just like previous versions of NetHack, NetHack Fourk is licensed
under the NetHack General Public License (which is similar to old
versions of the GNU General Public License).  Some of the files added
in NetHack 4 are dual-licensed and also allow other licensing options
in addition to the NGPL.  (The build system, aimake version 3, is
licensed under version 3 of the GNU GPL, rather than under the NGPL;
however, its license does not extend onto the license of the code it
compiles, leaving the resulting executables as purely NGPL.)

Several of the libraries on which NetHack Fourk depends have other licenses; for
instance, libjansson (which is included with the NetHack Fourk source) is
licensed under the Expat license, and SDL2 (which does not ship with the
source, but which is needed for grahical tiles) is licensed under the zlib
license.  Likewise, the tilesets mostly have licenses of their own.  The file
`copyright` in the root of the source distribution gives a machine-readable
explanation of the copyright status of the source files in the distribution.
For binary distributions, full copyright information will be installed with
the documentation.

Please note that there is no warranty for NetHack Fourk.


Getting the game running
========================

Is there a public server?
-------------------------

Not at this time.  I would like to provide one, but I currently do not
have a suitable place to host it.

How can I compile the game?
---------------------------

NetHack Fourk can be compiled on most commonly used desktop systems; the
NetHack 4 developers have tested Linux, OS X, and Windows, and these should all
work for Fourk as well.  Linux and Mac OS X work out of the box.  Windows is a
little harder but still relatively easy to compile on, if you don't mind
downloading several extra tools to do the compilation with.

In order to compile NetHack Fourk locally, you can get a copy of the
source from the repository, and follow the instructions in the README
file (if you're on Mac OS X, follow the instructions for UNIX/Linux,
because OS X is a UNIX derivative).  You'll need some dependencies in
addition to NetHack Fourk itself: a working C toolchain and zlib.
(You'll also need postgresql, pgcrypto and inetd if you're planning to
run your own server, but you probably aren't; for local play, the game
works just fine without a server to connect to.)  Previous versions of
NetHack 4 depended on the [libjansson library][7].  You can still use
your own copy of libjansson, but by the time NetHack Fourk was
created, the source to this library was already being shipped with
NetHack 4 in order to reduce library dependency issues; this tradition
is continued in NetHack Fourk, and so you can tell the build system to
use that copy instead.  Similarly, NetHack Fourk depends on
libuncursed (a curses library written primarily for NetHack 4 and
secondarily for other similar games), but it is included in the source
tree and will be built automatically.

To build a binary capable of tiles play, you will also need version 2 of the
[Simple DirectMedia Layer][8] library (and its development headers and (on
Windows) import libraries).  On Linux, you might have to compile it yourself;
some older distributions only offer version 1, which is not sufficient to
compile a tiles port.

You'll additionally need a copy of Perl in order to run the build system: this
will likely come with your system on Linux and Mac OS X.  If you're on
Windows, get [Strawberry Perl][9]; it comes with a working C toolchain and all
the libraries required (except for SDL), meaning that you can avoid the usual
problems of trying to set up a C toolchain on Windows.  On Mac OS X, the usual
C toolchain is Xcode, which is available from Apple; most Linux systems come
with a C toolchain, but if you're on Debian or a derivative (such as Ubuntu or
Linux Mint), you'll need to install the `build-essential` package (and also
`bison` and `flex`).


Are precompiled binaries available?
-----------------------------------

Currently, no precompiled binaries are available.  I could provide them
for Debian amd64 systems, but there seems little point, since compiling
is a routine activity for most Debian users.  The people most likely to
want precompiled binaries are Windows and possibly Mac users, but I do
not have the facilities to compile for those platforms.


What does the "connect to server" option in the main menu do?
-------------------------------------------------------------

NetHack Fourk inherits a server API from NetHack 4 and NitroHack
before it that should theoretically allow a local executable (even
tiles) to play on a remote system.  This mode works fine in testing,
but there are no public servers right now to connect to, so it's not
useful in practice.

Even NetHack 4 (which does have a public server) does not allow this
kind of connection, because there are known security problems in the
implementation (which do not affect local play).  The NetHack 4
development team intends at some point to do a security audit of the
network protocol in question, but even then the network protocol would
only be usable in NetHack Fourk if a public server existed; currently
there isn't one.


Does NetHack Fourk depend on curses/ncurses?
--------------------------------------------

No.  NetHack Fourk ships with and uses libuncursed.


How do I set the interface to look more like 3.4.3?
---------------------------------------------------

Options you may want to consider changing include `border` (especially if
you're playing in an 80x24 terminal), the various `draw_` options,
`menupaging`, `prompt_inline`, and `tileset`.


How do I select which interface NetHack Fourk uses?
---------------------------------------------------

NetHack Fourk does its rendering via the libuncursed rendering
library.  By default, it will use a terminal for rendering, using its
`tty` or `wincon` interface (depending on your platform).  In order to
use other interfaces, you will need a plugin for libuncursed; for
instance, `libuncursed_sdl.dll` ships with the Windows executables
(and the sources for that plugin ship with the NetHack Fourk source,
meaning that it will be built when you compile the source on other
operating systems, too).

In order to load the `sdl` rather than `tty` or `wincon` interface, you will
need to make this request known to libuncursed via either of the following
methods:

  * Use the `--interface sdl` command line option when starting NetHack 4; or
  * Use an executable whose name ends `-sdl` (the build system will create an
    executable or symlink `nhfourk-sdl` for this purpose if building in tiles
    mode).

The `sdl` interface is a "fake terminal" port that simulates a terminal
itself, rather than using an actual terminal; this allows you to avoid any
problems that the terminals provided with your platform might have.  (For
instance, the Windows console is rather slow.)  Unlike the other interfaces,
it is also capable of displaying tiles.


Is there a graphical/tiles version?
-----------------------------------

Yes.  For tiles play, you will need to be playing on a graphical interface
(not a terminal interface; thus tiles play on a server won't work); and you
will also need to change the "tileset" option in-game to specify a graphical,
rather than text-based, tileset.  The `libuncursed_sdl` interface is currently
recommended for tiles play (being the only current graphical interface plugin
for libuncursed).

There are currently six tilesets available:

  * The "ASCII" tileset is a very traditional 3.4.3-like text-based tileset
    that uses only ASCII characters;
  * The "Unicode" tileset is the equivalent of "IBMgraphics" or "DECgraphics"
    from 3.4.3 in terms of how it looks (it is internally implemented in terms
    of either Unicode or IBMgraphics, depending on what your terminal needs),
    and is the recommended tileset for text-based play;
  * The "Slash'EM" tileset is based on the tiles that shipped with previous
    versions of NetHack and Slash'EM (Slash'EM has a greater selection of
    tiles available than NetHack, which is why its tiles are used);
  * The "DawnLike" tileset is a new tileset by Andrew Rios (based on a 16
    color palette by DawnBringer), which is particularly good on smaller or
    lower-resolution screens; and
  * The "RLTiles" tileset is a substantially improved version of an old
    NetHack tileset (also called RLTiles), thanks to Raz, that contains a huge
    amount of detail (e.g. you can typically make out the type of monster that
    makes up a statue, or the race and gender of a player, simply from details
    in the art).
  * The "Geoduck" tileset is based on the idea of incorporating the
    traditional ASCII symbols prominently into the artwork but also
    supplying additional, differentiating details so that the player
    can easily distinguish one thing from another.  For example, the
    tiger looks like an f but is depicted in tiger stripes.  This set
    may be of particular interest to players who would like to learn
    to play with the ASCII or Unicode sets but who are intimidated at
    first and feel that they need a little extra help learning the
    details.

Note that as libuncursed plugins do not currently work correctly on Mac OS X,
graphical tilesets will not work there either.


How do I customize the map display, or install new tilesets?
------------------------------------------------------------

These are the same questions: you customize the map display via creating and
using a custom tileset.  You can create and edit tilesets using the
`tilecompile` tool, which can be optionally installed along with NetHack 4
(use `--with=tilecompile` if building manually, or enable the option in the
installer if you're using a precompiled build).  See its manual for
instructions (`man tilecompile` on Linux, or look in the documentation folder
on Windows; the documentation folder itself will be linked from your Start
menu, if you're using the precopmiled installer).  The easiest way to start is
to decompile an existing tileset using `tilecompile`, make changes, and then
recompile your changed version.

Once you've created a tileset, or obtained one from someone else, you can
place it in the `tilesets` subdirectory (alongside your `save` subdirectory,
e.g. `~/.config/NetHack4/tilesets` on Linux), and it should automatically show
up on the options menu in-game.


Why is the build system building things I didn't expect it to?
--------------------------------------------------------------

There are two main causes of this.  If your problem is that it's
building shared libraries repeatedly, this is because a shared library
is used for two different purposes on some OSes: being loaded at
runtime, and being read at compile time to determine how to link
against it.  There are a bunch of circular dependencies between
libraries in NetHack Fourk, so the build system sometimes creates one
or more provisional copies of a library in order to get all the
dependencies correctly figured out.

Alternatively, if your problem is that it seems to be building the tiles code
and you're not running a graphical install, this is because tilesets are now
used even for text-based play (the "tiles images" are character/styling
combinations rather than images).


Can you reduce aimake's memory usage?  My build ran out of memory!
------------------------------------------------------------------

What, *again*?

500 MB should be plenty for the build, but if you're trying to build on a
particularly small system, let us know.  The problem is that `aimake` is
trying to do a huge amount of work (more than most build systems do), and that
Perl is very memory-inefficient.


Gameplay
========

Should I look up "spoilers"/gameplay FAQs/information about the game?
---------------------------------------------------------------------

We hope that the game is pretty fun both ways, both with spoilers and without.
A large number of people enjoy playing NetHack even after reading all the
spoilers about it that they can; it's quite hard to get information on the
number of people who enjoy it without, because they tend to not mingle with
the NetHack-playing community at large, but many people have reported enjoying
it before they became spoiled.

Note that without spoilers, it is likely to take a very long time before you
win (most likely years); there's a lot to learn, and even more to figure out.
Of course, another way to look at that is that you can have years of exciting
gameplay discovery ahead of you!  One interesting middle ground might be to
find other players unspoiled on external sources, and share your findings
among yourselves; this is the way that NetHack was played for many years, in
UNIX computer labs all over the world, and it still works today.

If you're interested in reading spoilers, good resources include IRC
(#acehack and #nethack on irc.libera.chat), and the [NetHack
wiki][10].  NetHack 4 has some deviations from 3.4.3, and NetHack
Fourk has more, but spoilers for 3.4.3 are still a good starting point.

If you are already familiar with NetHack and want to know about the
differences in NetHack Fourk, you might be interested in the changelog,
found in doc/changelog-fourk.txt in the NetHack Fourk source tree.


Which character should I select?
--------------------------------

Whatever you enjoy playing with.  Try a few playstyles out, and note
that trying the more difficult characters is often good practice for
eventually winning with the easier ones.

There's widespread disagreement about role difficulty (some people
think Wizards are the easiest role, others one of the hardest; they do
seem to be good for unusual challenge runs, though), but if you're
just looking for a win, lawful Valkyries seem to have the easiest time
overall.  (Not that any role is particularly easy; NetHack is much
harder than typical modern games are, and only the most experienced
players can get anything like a consistent win rate at it.)


What are the main gameplay changes from NetHack 3.4.3?
------------------------------------------------------

The interface has many improvements; we don't consider things like
warning the character that a corpse is dangerously old to be
gameplay-related, as it's information that should be theoretically
available anyway, but maybe you do.  Apart from that, some of the
largest changes were added as compensation to balance gameplay
elements that were balanced via means of perverse interface in 3.4.3;
for instance, amnesia now drains skill points, and floating eyes can
protect themselves from melee attacks.  There are also noticeable
improvements to the monster AI, especially where pets are involved.


Doesn't making the interface less hostile take away the challenge?
------------------------------------------------------------------

NetHack is a game where you play as an adventurer trying to survive in a
dungeon as they retrieve an amulet.  As such, it doesn't make a lot of sense
to give the player less information than the character would have.  In real
life, nobody (well, hardly anybody over the age of 3) eats something by
mistake when they were merely trying to hold it in their hands; dungeoneers
shouldn't become more likely to just because `e` and `w` are next to each
other on their keyboard.  Likewise, it can be assumed that an adventurer who
wasn't blind or otherwise impaired would notice a sea of lava right next to
them, and not accidentally walk into it because they'd pressed a key on a
keyboard too many times.

It's certainly possible to imagine an interesting game whose main challenge
comes from a hostile interface.  It shouldn't, however, be a tactical game
about dungeon exploration.  (Probably a minigame collection would work
better.)


What do all the commands do / How do I do *action*?
---------------------------------------------------

Press `?` while playing for a list of commands.  As is common with roguelike
interfaces, there are a lot of commands for specific purposes, because there
are a lot of possible actions.  Note that if you want to do something with an
item, you can press `i` to view your inventory, then the item's inventory
letter, in order to see a list of possible actions with that item.

If you expand your terminal very, very high vertically (at least 37 rows, but
more will give more space for information), the spare space will be used to
show reminders of game commands.  New players may want to do this while they
are learning the game.  (This also works when using a graphical tileset, but
you will need to expand the window still higher, as the graphics take up more
space than a character-based view would: 40 rows on the smallest tile size, or
64 rows with 32x32 tiles.)


How do I save or quit the game?
-------------------------------

The answer to this question is a little unusual, for two reasons.  NetHack is
a "roguelike" game, and one common feature of roguelikes is that they have
permadeath; when you die, that's it for that character, and there is no way to
reload a save and carry on.  Likewise, you cannot go back to an earlier save
even while your character is alive; any actions you do have permanent effects.

In most roguelikes, including earlier versions of NetHack, and both NitroHack
and AceHack (NetHack 4's predecessors), this is implemented via a
"save-and-exit" command that saves the game, and a game load command that also
deletes the save file.  Thus, saving would exit the game, and quitting the
game would lose you your character (because the save file was deleted when it
was loaded).

In NetHack 4, we take a different approach: the save file always exists on
disk, and is saved continuously with almost every key you press.  Thus, the
equivalent of saving is to just close the game (which is why the `S` command,
which traditionally saves and exits NetHack, has its confirm option described
as "close the game").  You can use the `S` command to do this, or you can just
outright close the game window and it'll have the same effect.  (This should
greatly reduce the risk of losing a game to a network disconnection.)  You can
even save in the middle of a turn this way (although note that this is a
relatively new feature that has not been fully tested, so paranoid players
might want to restrict themselves to the `S` command); opening the menu with
`Ctrl-C` is another way to save in the middle of a turn.

If you actually did want to delete your save file and effectively kill your
character in the process, there's a new `!` option to the `S` command to do
that.  I'm not sure why you would (perhaps because it doesn't carry as large a
score penalty as dying?), but the option's there.


Where are the save files / recordings / dump files?
---------------------------------------------------

On Linux and UNIX, by default, `~/.config/NHFourk/save`,
`~/.config/NHFourk/log`, `~/.config/NHFourk/dumps` respectively.  (If
misconfigured, it's possible that the game will put dump files in your home
directory.)  The dump files record details of games that have ended, whether
in victory or defeat.

Windows works the same way, except that instead of `~/.config`, it uses
whatever directory `CSIDL_APPDATA` refers to.  This is normally something like
`C:\Users\username\AppData\Roaming`, although it depends on how Windows is
configured.

There's often a `save` folder in the install directory (depending on
how the game was installed), but this is used for save information
common to all users: bones files, xlogfiles, that sort of thing.


How do I eat an item from the ground?
-------------------------------------

Use `e` then `,`.  (In general, 3.4.3 keybindings work unchanged in Nethack 4;
this is one of the major differences.  The 3.4.3 keybindings were
unsatisfactory because `en` and `ey` meant different things depending on
whether you were standing on an edible item or not; this was a common cause of
nasty interface deaths.  Changing commands to be less context-sensitive was
thus a priority.)


How do I change between number_pad and vi-keys settings?
--------------------------------------------------------

In theory, the number keys on the numeric keypad should work for movement, and
the number keys on the main keyboard for command repeat; on a few terminal
emulators, you may have to turn NumLock off for this to work.  Hopefully, the
longstanding roguelike flamewar between using `hjklyubn` and `42867913` for
movement should no longer be something the game has to be aware of.  On a very
few terminal emulators, this may not work correctly, in which case you might
have to rebind the keys in-game.  (Rebinding the keys is also useful if you
have a German keyboard and want to move using `hjklzubn`.)

If you're feeling particularly heretical, you can move orthogonally with the
cursor keys (Up/Left/Down/Right) and diagonally using Home/End/PgDn/PgUp.
This adds a new dimension to the movement command Holy War whose implications
have not yet been discovered in practice.

See also the `keymap` option, that lets you replace blocks of keys
(e.g. rebinding `hjklyubn` to game commands rather than movement), or to make
more fine-tuned adjustments.


Why does pressing Esc sometimes produce stray commands or Alt-combinations?
---------------------------------------------------------------------------

Alt and Esc have almost identical terminal codes; the only difference between
them is the timings.  Sometimes, if you're playing on a server over a laggy
connection, network lag can make it impossible for NetHack (or any other
program) to distinguish between the two keys.

You can work around this via setting the `alt_is_esc` option; the downside is
that instead of an unreliable Esc key, your Alt key will no longer function.
You can work around that problem, in turn, by configuring your terminal to
interpret your Alt key as Meta, rather than as Alt; instructions for doing
this will depend on your terminal, and it may not be possible on every
terminal.  This will in turn lead to ambiguities between Alt and certain
non-ASCII characters; Nethack 4 does not yet support Unicode input, so the
problem doesn't come up here, but it's something to watch out for.  Terminal
codes can be badly designed sometimes.


What are the "x" and "[OK]" decorations on windows?
---------------------------------------------------

Hints that you can meaningfully press `Escape` or `Return`, respectively, to
cancel or accept the dialog box.  They're also used for NetHack 4's
rudimentary mouse support – the game is not fully playable with the mouse yet
(in particular, we're thinking about how the mouse should best interact with
the game map) – but you can use them to close windows with the mouse.  Several
other things are clickable too (e.g. menus and items in the inventory
sidebar).  Mouse support is something that is likely to evolve through future
versions.

If you dislike the decorations, you can turn them off by disabling mouse
support in the options (option `mouse`).


How do I configure the game options?
------------------------------------

NitroHack changed the options file to not be human-editable (we're not 100%
sure why); rather, if you change the option settings using the `o` entry of
the main menu, changes will persist into future games.  (Changes to game
options using the `O` command last for only the current game, although will
survive past a save and reload.)

There's also a new sort of option called a "birth option", which changes
settings for newly started games; for instance, you can play with Elbereth not
existing without needing to recompile the code.  (So now if, like many people,
you think it's a cheap tactic, nothing's forcing you to allow yourself access
to it.  It was always intended to be optional in NetHack 3.4.3 as a difficulty
setting, but the method of changing it was too obscure for most people.)


Why does Gehennom suck so much?
-------------------------------

Because it comes at a point in the game at which you've already achieved most
of your main goals, and have been given the means to achieve the rest of them
easily.  So it's basically a bunch of filler levels, with no challenge (mostly
because the damage formula doesn't scale into the late game), with repetitive
and tedious maps, with nothing much to aim for.

We're aware of this problem, and are currently looking at various
fixes.  The NetHack 4 developers are planning an overhaul for their
version 4.4, and NetHack Fourk may also try out some additional things.


Internals
=========

How does the save system work?
------------------------------

NitroHack's save system kept a log of user-entered commands, and replayed
these upon reloading a game.  However, this turned out to be too unreliable
for practical use, and many people lost their save games as a result.

NetHack 4.3's save system is loosely inspired by NetHack 4.2's save system,
which was a hybrid of the NitroHack and AceHack systems; the command log still
exists, but in addition to the log of commands, there is a (delta-compressed)
log of gamestates.  As such, the state of the game at any point during the
game can be recreated, even if the game binary is modified in ways that change
the meaning of commands; and this can allow saves to be reconstructed even in
the case of a power failure or similar situation.

NetHack 4.3 improves on this model by removing all the famously buggy
NitroHack save code, using the gamestate log in order to recover the state of
the game between turns, and a log of user input in order to recover the state
of the game within a turn.  Thus, changes to the engine that alter the effect
of a command will only cause you to lose a turn of progress, and only if you
were in the middle of an affected command at the time.  This save system also
enables some other fun tricks, such as reconnecting to a game and continuing
to play it before your original connection to the game times out.


How does the server code work?
------------------------------

The interface is completely decoupled from the gameplay (actually, it is in
3.4.3 as well; the main innovation in NitroHack was exposing this over a
network and adding a separate server daemon).  As such, there is no reason why
the server and client should be on the same system.  It's possible to get some
of the benefits of online play by using a local executable that connects to a
remote server (which is necessary to play tiles on a server); the code for
making connections is in the client by default, and at the moment, the only
obstacle to doing this is that there are no servers that accept connections
from remote clients (nethack4.org firewalls them out, because the server has
not been security audited yet, and we have reason to believe that there are
several security bugs in the API).  The server/client code is used internally
on nethack4.org; connecting to it via telnet or ssh spawns a client, which
then spawns a matching server process and connects to it.  When playing
locally, there's normally no need to do this; the interface will just use the
game engine directly.

There are nine separate directories in the distribution, which handle the
separate codebases: `libnethack_common` for information common to both the
server and client, `libnethack` for the game logic, `libnethack_client` to
allow clients to connect to the server, `nethack` for the interface code (that
calculates what to draw on screen), `libuncursed` for the rendering code (that
actually draws it), `testbench` for test code, `tilesets` for the
tiles-handling utilities, `libjansson` for the JSON encoding between the
client and the server, and `nethack_server` for the server-specific logic
(creating accounts, keeping separate save games for separate user accounts,
that sort of thing).  Various executables are built out of code from various
directories (but not with a 1:1 correspondence; most of them use code from
multiple directories).

-------------------------------------
References:

[1]: http://nethack.org
[2]: http://nethack4.org
[3]: http://nethack4.org/media/nethack4.git
[4]: http://roguelikes.live/nh4-bugzilla/
[5]: http://junethack.de
[6]: http://www.chiark.greenend.org.uk/~sgtatham/putty/
[7]: http://www.digip.org/jansson
[8]: http://www.libsdl.org
[9]: http://strawberryperl.com
[10]: http://nethackwiki.com

